ups.raw <- read.csv('df.431.csv', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", ...)
ups.raw <- read.csv('df.431.csv', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
ups.col.types <- c('numeric', #Vehicle_size
'factor', #OGZ_NR
'character', #RTE_NR
'Date', #Date
'numeric', #RTE_Miles
'factor', #VEH_NR
'numeric', #Total_Vol
'numeric', #Total_Stop
'character', #Car_Group
'character', #Make
'character', #Model
'character', #Fuel
'character', #Engine_Type
'numeric', #MilesRun
'numeric', #Fuel_Used
'interger') #MPG
ups.raw <- read.csv('df.431.csv', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "",
colClasses = ups.col.types)
ups.raw <- read.csv('df.431.csv', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "",
colClasses = c('numeric', #Vehicle_size
'factor', #OGZ_NR
'character', #RTE_NR
'Date', #Date
'numeric', #RTE_Miles
'factor', #VEH_NR
'numeric', #Total_Vol
'numeric', #Total_Stop
'character', #Car_Group
'character', #Make
'character', #Model
'character', #Fuel
'character', #Engine_Type
'numeric', #MilesRun
'numeric', #Fuel_Used
'interger') #MPG
)
ups.raw <- read.csv('df.431.csv', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
View(ups.raw)
missmap(ups.raw, main="Ups_raw - Missings Map",
col=c("yellow", "black"), legend=FALSE)
require(Amelia)
missmap(ups.raw, main="Ups_raw - Missings Map",
col=c("yellow", "black"), legend=FALSE)
View(ups.raw)
barplot(table(ups.raw$Fuel),
names.arg = c("G", "D"),
main = "Fuel Types", col="black")
install.package('Rfacebook')
install.packages('Rfacebook')
load("fb_oauth.Rd") ## load my previously saved authentication token
me <- getUsers("me", token=fb_oauth)
my_friends <- getFriends(token=fb_oauth, simplify=TRUE)
my_friends_info <- getUsers(my_friends$id, token=fb_oauth, private_info=TRUE)
my_network <- getNetwork(fb_oauth, format="adj.matrix")
singletons <- rowSums(my_network)==0 # friends who are friends with me alone
require(igraph)
my_graph <- graph.adjacency(my_network[!singletons,!singletons])
layout <- layout.drl(my_graph,options=list(simmer.attraction=0))
plot(my_graph, vertex.size=2,
#vertex.label=NA,
vertex.label.cex=0.5,
edge.arrow.size=0, edge.curved=TRUE,layout=layout)
library(devtools)
install_github("Rfacebook", "pablobarbera", subdir = "Rfacebook")
library(devtools)
library(Rfacebook)
token <- "10155021898335402
me <- getUsers("Ryan S. Shin", token, private_info = TRUE)
me$name # my name
me <- getUsers("Ryan S. Shin", token, private_info = TRUE)
token <- "10155021898335402
me <- getUsers("Ryan S. Shin", token, private_info = TRUE)
me <- getUsers("ryanshin", token, private_info = TRUE)
token <- "10155021898335402
s
""
asdf
"
token <- "10155021898335402"
me <- getUsers("ryanshin", token, private_info = TRUE)
me$name # my name
me <- getUsers("ryanshin", token, private_info = TRUE)
token <- "10155021898335402"
me <- getUsers("ryanshin", token, private_info = TRUE)
library(devtools)
install_github("pablobarbera/Rfacebook/Rfacebook")
require(Rfacebook)
fb_oauth <- fbOAuth(app_id="808403775894190", app_secret="da2713e1a6b6e5d595b0d6d48d3595e4",extended_permissions = TRUE)
d
ups.raw
tapply(ups.raw$MPG)
ups.raw$MPG
ls(ups.raw)
tapply(ups.raw$Vehicle_size, ups.raw[,c("Fuel, MPG")])
tapply(ups.raw$Vehicle_size, ups.raw[,c("Fuel, MPG")], mean)
tapply(ups.raw$Vehicle_size, ups.raw[,c(Fuel, MPG)], mean)
ls(ups.raw)
ups.raw$Fuel
tapply(ups.raw$Vehicle_size, ups.raw[,c("Fuel", "MPG")], mean)
a <- tapply(ups.raw$Vehicle_size, ups.raw[,c("Fuel", "MPG")])
View(a)
a <- aggregate(ups.raw$Vehicle_size, ups.raw[,c("Fuel", "MPG")], mean)
View(a)
a <- aggregate(ups.raw$Vehicle_size, ups.raw[,c("Fuel", "MPG")])
a <- aggregate(ups.raw$Vehicle_size, ups.raw[,c("Fuel", "MPG")])
a <- aggregate(ups.raw$Vehicle_size, ups.raw[,c("Fuel", "MPG")], count)
a <- aggregate(ups.raw$Vehicle_size, ups.raw[,c("Fuel", "MPG")], sum)
View(a)
na.omit(ups.raw)
dim(ups.raw)
df1 <- na.omit(ups.raw)
dim(df1)
a <- aggregate(df1$Vehicle_size, df1[,c("Fuel", "MPG")], mean)
View(a)
a <- aggregate(df1$Vehicle_size)
a <- aggregate(df1, by=list(Vehicle_size), mean)
print('Big')
?elif
ve_list <- function(size) {
if size >= 1000 {
print('Big')
}
else if 500 <= size < 1000 {
print('Med')
}
else size < 500 {
print('Small')
}
}
return('Big')
return(print('Big'))
ve_list <- function(size) {
if size >= 1000 {
return(print('Big'))
}
else if 500 <= size < 1000 {
return(print('Med'))
}
else size < 500 {
return(print('Small'))
}
}
ve_list <- function(size) {
if size >= 1000 {
return(print('Big'))
}
#else if 500 <= size < 1000 {
#  return(print('Med'))
#}
else size < 500 {
return(print('Small'))
}
}
ve_list <- function(size) {
if size >= 1000 {
return(print('Big'))
}
#else if 500 <= size < 1000 {
#  return(print('Med'))
#}
else size < 500 {
return(print('Small'))
}
}
ve_list <- function(size) {
if size >= 1000 {
return(print('Big'))
}}
ve_list <- function(size) {
if size >= 1000 {
return(print('Big'))
}
ve_list <- function(size) {
if size >= 1000 {
return(print("Big"))
}
ve_list <- function(size) {
if size > 1000 {
return(print("Big"))
}
ve_list <- function(size) {
if size > 1000 {
return(print("Big"))
}}
ve_list <- function(size) {
if size > 1000 {
print("Big")
}}
ve_list <- function(size) {
if size > 1000 {
print("Big")
}}
ve_list <- function(size) {
if size > 1000 {
print("Big")
}
ve_list
a <- function(x) {
x + 5
}
a
a(5)
a <- function(x) {
x + 5
print(x)
}
a(5)
a <- function(x) {
x <- x + 5
print(x)
}
a(5)
a <- function(x) {
if x > 1000
print(x)
}
a <- function(x) {
if x > 1000 {
print(x)
}
}
f i b o < - f u n c t i o n ( n ) {
i f ( n = = 1 | | n = = 2 ) {
1
} e l s e {
f i b o ( n - 1 ) + f i b o ( n - 2 )
}
}
a <- function(x) {
if x > 1000 {
print(x)
}
}
a <- function(x) {
if x > 1000 {
x
}
}
a <- function(x) {
if x > 1000 {
5
}
}
source('D:/github_shin/sungjin712/431/dataset/431_Pro_Main.R', echo=TRUE)
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
if x > 1000 {
return(5)
if x > 1000 {
return(5)
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
a <- function(x) {
if x > 1000 {
return(5)
}
}
hist(x,prob=T,breaks=20,main=paste("n =",n, "p =",p))
x <- [1,2,3,45]
x <- c[1,2,3,45]
x <- c(1,2,3,45)
hist(x,prob=T,breaks=20,main=paste("n =",n, "p =",p))
ups(df1)
library(ggplot2) #ggplot Connection
library(XLConnect) #Load Excel File
library(dplyr) #Data Analysis Packages
library(WriteXLS)
library(plyr)
setwd("D:/github_shin/sungjin712/431/dataset")
setwd("D:/github_shin/sungjin712/431/dataset")
ups = loadWorkbook("df.ups.csv")
ups.raw = readWorksheet(ups, sheet="df.ups")
ups.raw <- data.frame(ups.raw) # Convert to dataframe
#Load data from excel from df.ups
ups = loadWorkbook("df.ups.csv")
ups.raw = readWorksheet(ups, sheet="df.ups")
ups.raw <- data.frame(ups.raw) # Convert to dataframe
ups.raw <- read.csv('df.ups.csv', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
#Load data from excel from center num.
ups.name <- read.csv('SLIC-Center Name', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
ups.name <- read.csv('SLIC_Center_Name.csv', header = TRUE,
sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
dim(ups.raw)
ups.raw <- na.omit(ups.raw)
dim(ups.raw)
ups.raw$Vehicle_name
ups.raw$VEH_NR
duplicate(ups.raw$VEH_NR)
duplicated(ups.raw$VEH_NR)
ups.raw$VEH_NR(!duplicated(ups.raw$VEH_NR))
ups.raw$VEH_NR[!duplicated(ups.raw$VEH_NR)]
dim(ups.raw)
a <- ups.raw$VEH_NR[!duplicated(ups.raw$VEH_NR)]
a
dim(a)
a <- ups.raw$VEH_NR[!duplicated(ups.raw$VEH_NR)]
dim(a)
str(a)
ups.path <- "https://github.com/sungjin712/sungjin712/blob/master/431/dataset/"
ups.data.file <- "df.431.csv"
install.packages("maps")
install.packages("mapdata")
library(maps)
library(mapdata)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
library(maps)
library(mapdata)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85), col="gray90”, fill=TRUE)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85),
col="gray90”, fill=TRUE)
map("worldHires","Canada”, xlim=c(-141,-53), ylim=c(40,85),
col="gray90”, fill=TRUE))
map("worldHires","Canada", xlim=c(-141,-53), ylim=c(40,85),
col="gray90", fill=TRUE))
map("worldHires","Canada", xlim=c(-141,-53), ylim=c(40,85),
col="gray90", fill=TRUE))
map("worldHires", "Canada")
map("worldHires", "Canada", xlim=c(-141,-53), ylim=c(40,85),
col="grayo90", fill=TRUE)
map("worldHires", "Canada", xlim=c(-141,-53), ylim=c(40,85),
col="gray90", fill=TRUE)
map("state", interior = FALSE)
map("state", boundary = FALSE, col="gray", add = TRUE)
tf= structure(list(state = structure(1:14, .Label = c("AK", "AL",
"AR", "AZ", "CA", "CO", "CT", "DE", "FL", "GA", "IA", "IL", "IN",
"KS"), class = "factor"), num = c(21L, 31L, 12L, 56L, 316L, 53L,
31L, 7L, 335L, 63L, 42L, 73L, 40L, 2L), region = structure(c(2L,
1L, 4L, 3L, 5L, 6L, 7L, 8L, 9L, 10L, 13L, 11L, 12L, 14L), .Label = c("alabama",
"alaska", "arizona", "arkansas", "california", "colorado", "connecticut",
"delaware", "florida", "georgia", "illinois", "indiana", "iowa",
"kansas"), class = "factor")), .Names = c("state", "num", "region"
), class = "data.frame", row.names = c(NA, -14L))
require(maps);require(ggplot2)
states <- map_data("state")
tfmerged <- merge(states, tf, sort = FALSE, by = "region")
tfmerged <- tfmerged[order(tfmerged$order), ]
qplot(long, lat, data = tfmerged, group = group, fill = num,
geom="polygon")
library(mapproj)
install.pakckages("mapproj")
install.packages("mapproj")
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% white")
source("census-app/helpers.R")
swirl()
library("swirl")
swirl()
data(cars)
?cars
headcars)
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y= cars$dist)
plot(dist ~ speed, cars)
plot(x =cars$dist, y = cars$speed)
plot(x =cars$speed, y = cars$dist)
plot(x =cars$speed, y = cars$dist, xlab = "Speed")
plot(x =cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x =cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x =cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed")
plot(x =cars$speed, y = cars$dist, ylab = "Stopping Distance", xlab = "Speed", main = "My Plot")
plot(cars, main = "My Plot")
ggmap(paris, extent = "normal")
librar(ggmap)
library(ggmap)
install.packages("ggmap")
ggmap(paris, extent = "normal")
library(ggmap)
ggmap(paris, extent = "normal")
paris <- get_map(location = "paris")
paris <- get_map(location = "paris")
str(paris)
murder <- subset(crime, offense == "murder")
str(murder)
View(murder)
qmplot(lon, lat, data = murder, colour = I(’red’), size = I(3), darken = .3)
qmplot(lon, lat, data = murder,
colour = I(’red’), sisize = I(3), darken = .3)
geocode("the white house")
map <- get_googlemap(’houston’, markers = df, path = df, scale = 2)
?getRversion
?getRversion
getRversion
library(ggmap)
myLocation <- "Indiana"
geocode("Indiana")
myMap <- get_map(location=myLocation, source="google",
maptype="roadmap", crop=FALSE)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google",
maptype="roadmap")
ggmap(myMap)
zoom = 10
ggmap(myMap)
zoom = 5
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google",
maptype="roadmap", zoom = 5)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google",
maptype="roadmap", zoom = 10)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google",
maptype="roadmap", zoom = 8)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google",
maptype="roadmap", zoom = 6)
ggmap(myMap)
myMap <- get_map(location=myLocation, source="google",
maptype="roadmap", zoom = 7)
ggmap(myMap)
ggmap(myMap) +
geom_point(aes(x = Longitude, y = Latitude), data = data,
alpha = 0.5, color = "darkred", size = 3)
ggmap(myMap) +
geom_point(aes(x = Longitude, y = Latitude), data = (12,41),
alpha = 0.5, color = "darkred", size = 3)
geocode("Indianapolis")
Longitude <-  -86.15807
Latitude <-  39.7684
ggmap(myMap) +
geom_point(aes(x = Longitude, y = Latitude), data =,
alpha = 0.5, color = "darkred", size = 3)
dir()
loc <- read.csv("SLIC_Center_Name.csv")
loc
loc_raw <- loc(,1)
loc <- read.csv("SLIC_Center_Name.csv")
loc_raw <- loc(,1)
loc_raw <- loc[,1]
loc_raw
loc_raw <- loc[,2]
loc_raw
for(i in loc_raw) { print(i)}
for(i in loc_raw) { geocode(i)
print(i)}
for(i in loc_raw) { geo <- geocode(i)
print(geo)}
geo
geo
str(geo)
geo_info <- data.frame(0,0,0,0,0,0,0,0,0,0)
geo_info
for(i in loc_raw) { geo_info <- geocode(i)
print(geo_info)}
geo_info
loc_raw <- loc[,2]
print(loc_raw)
geocode("Indianapolis")
